export const modulesData = [
  {
    Module: "Command Prompt",
    chapters: [
      "History",
      "Types of OS",
      "Why Servers prefer CLI over GUI?",
      "Why should you learn Command Prompt?",
      "How CMD is same as using a full OS?",
      "Absolute and Relative Paths",
      "A Command: Command + Arguments",
      "Getting started with basic commands",
      "Working with Folders: Creating & moving & deleting etc.",
      "Moving around folders",
      "Listing files from folders",
      "Working with files: Creating & updating & deleting files",
      "Revision",
    ],
  },
  {
    Module: "VS Code",
    chapters: [
      "What are code/text editors?",
      "Visual Studio Code",
      "Installing Visual Studio Code",
      "Opening VS Code from explorer/command prompt",
      "Opening Files & Folders",
      "Creating Files & Folders",
      "Adding Plugins",
      "Opening Command Prompt from Code Editor",
      "Revision",
    ],
  },
  {
    Module: "Introduction to Programming",
    chapters: [
      "Programming and Benefits",
      "CPP Introduction and Benefits",
      "Compilers and Lifecycle of a Program",
      "Install GCC Compilers",
      "Compiler and run your first program",
      "First Program",
      "Comments",
      "Revision & basic problem solving",
    ],
  },
  {
    Module: "Data Types and Variables",
    chapters: [
      "Data Types",
      "Variables",
      "Variables of Different Data Types",
      "Problems on Variables",
      "ASCII Table",
      "Type Conversions",
      "Macros & Type Range Macros",
      "Revision & basic problem solving",
    ],
  },
  {
    Module: "Input & Output",
    chapters: ["Input", "Output"],
  },
  {
    Module: "Maths required for Problem Solving",
    chapters: [
      "Number Systems",
      "Binary Number System",
      "Converting one number system to another",
      "Factors",
      "Multiples of a number",
      "Prime Number",
      "Prime Factorization",
      "AP Series",
      "Factorial",
      "Matrices(Basics)",
      "Graph Theory (Can also be learnt later)",
      "Revision",
    ],
  },
  {
    Module: "Operators",
    chapters: [
      "Introduction to Operators",
      "Arithmetic Operators",
      "Relational Operators",
      "Bitwise Operators",
      "Logical Operators",
      "Assignment Operators",
      "Increment Operators",
      "Miscellaneous",
      "Operator Precedence",
      "Basic problems on all the above topics",
      "Bit Manipulation(Should have been a whole new module)",
      "Bit Manipulation Concepts",
      "Revision",
    ],
  },
  {
    Module: "Problem Solving",
    chapters: [
      "Problem Solving Introduction",
      "Problem Format",
      "Reading a integer variable and printing the same in console",
      "Reading different data type variables and printing the same in console",
      "Sum of 2 numbers",
      "Swap 2 numbers",
      "Swap 2 numbers without using third variable",
      "Write a function that converts a temperature from Fahrenheit to Celsius",
      "Write a program that calculates the simple interest",
      "Cube of a number",
      "Revision of above problems",
    ],
  },
  {
    Module: "Conditional Statements",
    chapters: [
      "If else conditions",
      "Nested If else",
      "Determine if a person is eligible for voting",
      "If a number is even or odd?",
      "Check if a number is divisible by 6?",
      "Minimum of 2 numbers",
      "Maximum of 2 Numbers",
      "Minimum of 3 numbers",
      "Maximum of 3 numbers",
      "Whether a number is positive or negative or zero?",
      "Leap year or not?",
      "Switch-Case",
      "Revision of above problems",
    ],
  },
  {
    Module: "Loops",
    chapters: [
      "For Loop",
      "While Loop",
      "Converting for loop to while loop",
      "Converting while loop to for loop",
      "Different ways of solving the same problem with minor tweaks in the for loop",
      "Problems on Loops(solve with both while loops and for loops)",
      "Print 1-100 numbers",
      "Print numbers from 100-1",
      "Print only the odd numbers",
      "Sum of 1-100 numbers",
      "Sum of first N numbers",
      "Revision of above problems",
      "Print digits of a number",
      "Sum of digits of a number",
      "Reverse a number",
      "Finding 2 power x",
      "Finding x power y",
      "Multiplication table",
      "Palindrome",
      "Check Prime Number",
      "Generate the Fibonacci series",
      "Find maximum element among the given inputs",
      "Find the minimum element among the given inputs",
      "Revision of above problems",
      "Sum of numbers in a given range",
      "Prime number within a given range",
      "Armstrong number",
      "Determine if a number is perfect square",
      "Adding factorials (For Example: 1!+ 2!+ 3!+ 4!+ 5!)",
      "Maximum number consecutive same numbers among the given input",
      "Factorial of a number",
      "Factors of a number",
      "LCM",
      "HCF",
      "Do-While loop",
      "Nested Loops",
      "Different Pattern related questions(Google and have a look at them)(Very very important)",
      "Revision of above problems",
    ],
  },
  {
    Module: "Variables & Scope",
    chapters: [
      "Default/garbage values of Variables",
      "Local Variables",
      "Global Variables",
      "Revision",
    ],
  },
  {
    Module: "Functions",
    chapters: [
      "Functions Introduction",
      "return",
      "Passing Parameters",
      "Call by value",
      "Call by reference",
      "Function Scope",
      "Practice functions by solving the previous questions(Very important to understand the working of functions)",
      "Revision",
    ],
  },
  {
    Module: "Strings",
    chapters: [
      "String Fundamentals",
      "String Input and Output",
      "String Manipulation",
      "Substrings",
      "Finding substrings to locate a substring's starting position",
      "String conversion(uppercase to lowercase and lowercase to uppercase)",
      "String Comparison",
      "String Tokenization",
      "Practice",
      "Linear Search",
      "Write a function that reverses a given string",
      "Write a function that checks if a given string is a palindrome (reads the same backward as forward) regardless of case",
      "Write a function that counts the number of vowels (a e i o u) in a given string",
      "handling both uppercase and lowercase vowels",
      "Write a function that removes all punctuation characters from a given string",
      "Write a function that counts the number of words in a given string",
      "Write a function that replaces all occurrences of a specific character or substring with another character or substring in a string",
      "Write a function that checks if two strings are anagrams of each other (contain the same letters with the same frequency)",
      'Write a function that rotates a string by a given number of characters (e.g. rotate "Hello world!" by 2 becomes "!lo worldHel")',
      "Revision",
    ],
  },
  {
    Module: "Data Structures & Algorithms",
    chapters: [
      "Introduction to Data Structures",
      "Why Data Structures",
      "Time & Space Complexity",
      "Try answering time and space complexities of previously solved questions",
      "Algorithms",
      "Revision",
    ],
  },
  {
    Module: "Searching",
    chapters: [
      "Linear Search vs Binary Search",
      "Binary Search : Understanding time/space complexity",
      "Modify the binary search function to find the first or last occurrence of a target element in a sorted array that may contain duplicates.",
      "Revision",
    ],
  },
  {
    Module: "Arrays",
    chapters: [
      "Array Fundamentals",
      "Array Operations",
      "Write a function to find the largest or smallest element in an array",
      "Write a function to calculate the sum of all elements in an array",
      "Implement linear search to find a specific element in an array",
      "Implement binary search to find a specific element in an array",
      "Write a function to reverse the order of elements in an array",
      "Given an array containing consecutive numbers with one missing number find the missing number (assuming no duplicates)",
      "Write a function to check if an array contains duplicate elements. Start with simpler cases like sorted arrays or arrays with a limited range of values",
      "Rearrange array alternatively",
      "Sort an array of 0s 1s and 2s",
      "Write a function to move all zeroes in an array to the end while maintaining the relative order of other elements",
      "Given an array of numbers and a target sum",
      "find two numbers that add up to the target sum (assuming there's one unique pair)",
      "Merge 2 sorted arrays.",
      "Trapping Rain Water",
      "Chocolate Distribution Problem",
      "Stock buy and sell",
      "Spirally traversing a matrix",
      "Revision",
    ],
  },
  {
    Module: "Sorting Algorithms",
    chapters: [
      "Bubble Sort",
      "Selection Sort",
      "Insertion Sort",
      "Merge Sort",
      "Quick Sort",
      "Need for different Sorting Algorithms",
      "Revision",
    ],
  },
  {
    Module: "Stacks",
    chapters: [
      "Stack Fundamentals",
      "Stack Operations Practice",
      "Write a function that uses a stack to check if parentheses (round or square or curly) in a string are balanced (e.g. ((({}))) is balanced)",
      "Write code to implement a stack using arrays",
      "Write a function that uses a stack to convert an infix expression (e.g. a + b * c) to a postfix expression (e.g. a b c * +)",
      "Write a function that uses a stack to evaluate a postfix expression (see above question) and return the result.",
      "Revision",
    ],
  },
  {
    Module: "Queues",
    chapters: [
      "Queue Fundamentals",
      "Queue Operations Practice",
      "Write code to implement a queue using either arrays",
      "Given a queue containing characters",
      "Write a function to check if the queue is a palindrome",
      "Explore how you can implement queue-like behavior using two stacks",
      "Revision",
    ],
  },
  {
    Module: "Linked Lists",
    chapters: [
      "Linked Lists Fundamentals",
      "Linked Lists Practice",
      "Singly Linked List",
      "Doubly Linked List",
      "Write code to create a basic singly linked list with functionalities like adding nodes or printing the list and finding the length",
      "Write a function to reverse the order of nodes in a linked list (e.g. 1 -> 2 -> 3 becomes 3 -> 2 -> 1)",
      "Write a function to determine if a linked list contains a cycle (a loop where a node points back to an earlier node)",
      "Write a function to merge two sorted linked lists into a new sorted linked list",
      "Write a function to remove duplicate nodes from a sorted linked list. Start with a simpler case where duplicates are consecutive",
      "Write a function to find the middle node in a linked list (efficiently handle even and odd lengths)",
      "Write a function to find the Nth node from the end of the linked list (consider cases where N is greater than the list length)",
      "Write a function to calculate the sum of all elements in a linked list",
      "Write a function to create a deep copy of a linked list & ensuring a new list with independent nodes",
      "Revision",
    ],
  },
  {
    Module: "Trees",
    chapters: [
      "Trees Fundamentals",
      "Trees Operations & Practice",
      "Trees Traversal",
      "Trees Searching",
      "Trees Insertion",
      "Trees Deletion",
      "Binary Search Tree",
      "Write code to create a basic binary tree with functionalities like adding nodes & printing the tree (pre-order or in-order or post-order) and finding the height",
      "Write a function to verify if a given binary tree is a binary search tree (BST)",
      "Search for a specific value in a BST",
      "Find the minimum or maximum element from BST efficiently",
      "Write a function to find the depth of a specific node in a tree (the number of edges from the root node to that node)",
      "Write a function to calculate the sum of all node values in a tree using a chosen traversal method.",
      "Implement a function to check if a binary tree is balanced (all leaves have roughly the same depth)",
      "Write a function to create a mirror image of a binary tree (left subtree becomes right subtree and vice versa)",
      "Revision",
    ],
  },
  {
    Module: "Heaps",
    chapters: [
      "Heaps Introduction",
      "Min-Heap",
      "Max-Heap",
      "Remove and return the root node (min/max element) while maintaining the heap property",
      "Add a new element to the heap and re-arrange nodes to maintain the heap property",
      "Change the value of an existing node in the heap",
      "Write code to create a min-heap using an array",
      "with functionalities like insert",
      "extract minimum",
      "and printing the heap in level order",
      "Similar to above question",
      "but implement a max-heap",
      "Given an array",
      "write a function to determine if it represents a valid min-heap or max-heap based on the heap property.",
      "Find the kth largest element in an array efficiently using a min-heap. Add elements to the heap",
      "ensuring it only contains the k largest elements and then return the root (minimum) which will be the kth largest element.",
      "Given an array of k sorted linked lists & write a function using a min-heap to merge them into a single sorted linked list.",
      "Understand the basic concept of Huffman coding for data compression which uses a min-heap to assign codes based on symbol frequencies.",
      "Revision",
    ],
  },
];
